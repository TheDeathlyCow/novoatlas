architectury {
    common rootProject.enabled_platforms.split(',')
}

dependencies {
    // We depend on Fabric Loader here to use the Fabric @Environment annotations,
    // which get remapped to the correct annotations on each platform.
    // Do NOT use other classes from Fabric Loader.
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modCompileOnly("com.github.glitchfiend:TerraBlender-fabric:$rootProject.minecraft_version-$rootProject.terrablender_version")
}

loom {
    accessWidenerPath = file("src/main/resources/novoatlas.accesswidener")
}

def exampleSourceDir = file("$rootDir/common/src/main/resources/resourcepacks")

def buildDatapacks = tasks.register("buildDatapacks") {
    group = "build"
}
def datapackBuildTarget = file("$rootDir/build/datapacks")

exampleSourceDir.eachDir { dir ->
    if (dir.isDirectory()) {
        def taskName = "buildDatapack${dir.name.capitalize().replace("-", "")}"

        def task = tasks.register(taskName, Zip) {
            group = "build"
            from(dir)
            archiveFileName.set("${dir.name}-${rootProject.mod_version}.zip")
            destinationDirectory.set(datapackBuildTarget)
        }

        tasks.named("buildDatapacks") {
            dependsOn(task)
        }
    }
}

tasks.named("build") {
    dependsOn(buildDatapacks)
}
